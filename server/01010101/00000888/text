cf. http://www.dyalog.com/blog/2015/02/solving-the-2014-apl-problem-solving-competition-its-all-right/

This is a brief write up of the derivation of a simple function in Joy, inspired by a problem from the 2014 APL Problem Solving Competition.  The problem description states, "Write a dfn that takes the length of the legs of a triangle as its left argument and the length of the hypotenuse as its right argument and returns 1 if the triangle is a right triangle, 0 otherwise."

We modify this problem slightly as follows:  Since it makes no sense in Joy to speak of "right argument" we take all three arguments from the stack, with the "legs" first followed by the hypotenuse.  We also return Boolean values rather than integers.

To begin we state the desired function with its arguments like so:

a b c Q cssclass:/12345678/12395686

Next we consider a simple form of the problem that allows any functions to be interspersed with the expected arguments:

a dup * b dup * + c dup * = cssclass:/12345678/12395686

For convenience we postulate a definition:

sqr == dup *  cssclass:/12345678/12415686

And the form becomes:

a sqr b sqr + c sqr = cssclass:/12345678/12395686

Modify this form in the obvious way (/01010101/0000101d) using dip to get an intermediate form for Q:

a b c [[sqr] dip sqr +] dip sqr = cssclass:/12345678/12395686

Notice that we can rearrange it a little to get something I feel is more elegant:

a b c sqr [sqr [sqr] dip +] dip = cssclass:/12345678/12395686

Isn't that nice?

Here it is in action:

div:/01010101/00000896

css:/12345678/00000008
css:/12345678/01010102