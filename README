

A dialect of Joy in Python.


--------------------------------------------------


Joy is a programming language created by Manfred von Thun that is easy to
use and understand and has many other nice properties.  This Python script
is an interpreter for a dialect of Joy that attempts to stay very close
to the spirit of Joy but does not precisely match the behaviour of the
original version(s) written in C.  A Tkinter GUI is provided as well.


--------------------------------------------------


    Copyright © 2014 Simon Forman

    This file is joy.py

    joy.py is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    joy.py is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with joy.py.  If not see <http://www.gnu.org/licenses/>.


--------------------------------------------------


Table of Contents

  Introduction

  Part I - Joy
    Manfred von Thun, Appreciation
    Simplicity
    Basics of Joy
    Literals and Simple Functions
    Simple Combinators
    Definitions and More Elaborate Functions
    Programming and Metaprogramming
    Further Reading

  Part II - This Implementation

    joy()

    Converting text to a joy expression.
      parse()
      tokenize()
      convert()

    Stack
      list_to_stack()
      iter_stack()
      stack_to_string()

    Functions
      stack → stack
      note() decorator
      define several functions

    Combinators
      functions that call joy()

    Definitions
      functions as equations

    Initialize
      add functions from Python operator module
      add aliases
      add definitions

    REPL (Read, Eval, Print Loop)

  Part III - The GUI

    History
    Structure
    Commands
      Mouse Chords
      Keyboard
    Output from Joy

  References


--------------------------------------------------


§ Introduction

I don't recall exactly how or when I first heard of the Joy programming
language, or even what it was that recently prompted me to investigate
it and write this interpreter.  I am glad it happened though because as
I study Joy I find that it is very aptly named.  It is clear, concise,
and ameniable to advanced techniques for constructing bug-free
software.

Backus' Turing award paper - Functional programming - Notation for
mathematical programming

Exploring the system using this Python implementation - Pickling system
state - The GUI


--------------------------------------------------


Part I - Joy

Developed by Manfred von Thun, don't know much about him, not much on
the web about Joy and von Thun (Von Thun?) Several other people have
played with it.  Other languages (Factor, Cat, Kont, etc?) I wish I had
known of it a decade ago when it was the subject of active work.

Stack based - literals (as functions) - functions - combinators -
Refactoring and making new definitions - traces and comparing
performance - metaprogramming as programming, even the lowly integer
range function can be expressed in two phases: building a specialized
program and then executing it with a combinator - ?Partial evaluation?
- ?memoized dynamic dependency graphs? - algebra

Because it has desirable properties (concise, highly factored) the
programming process changes, the ratio of designing to writing code
shifts in favor of design.  The documentation becomes extensive while
the code shrinks to stable bodies of small well-factored incantations
that are highly expressive, much like mathematical papers consist of
large bodies of exposition interlaced with mathematical formula that
concisely and precisely express the meaning of the text.

The time and attention of the programmer shifts from thinking about the
language to thinking in the language, and the development process feels
more like deriving mathematical truths than like writing ad-hoc
solitions.

I hope that this script is useful in the sense that it provides an
additional joy interpreter (the binary in the archive from La Trobe
seems to run just fine on my modern Linux machine!)  But I also hope
that you can read and understand the Python code if you want to and
play with the implementation itself.

The best source (no pun intended) for learning about Joy is the
information made available at the website of La Trobe University (see
the references section at the end of this script for the URL) which
contains source code for the original C interpreter, Joy language source
code for various functions, and a great deal of fascinating material
mostly written by Von Thun on Joy and its deeper facets as well as how
to program in it and several interesting aspects.  It's quite a
treasure trove.

§ Basics of Joy

Joy is stack-based.  There is a main stack that holds data items:
numbers, strings, functions, and sequences which hold data items
themselves.  All functions are considered to be unary, accepting a
stack and returning a stack (including technically number, string, and
sequence literals which are considered functions that return stacks
with their value on the top.)

A Joy expression is just a sequence of items.  The evaluation proceeds
by putting all literals onto the main stack and executing functions as
they are encountered, passing them the current main stack and replacing
the main stack with the result returned.

The main loop is very simple as most of the action happens through what
are called "Combinators", which accept sequences on the stack and run
them (using the joy() function) in various ways.  These combinators
factor specific patterns that provide the effect of control-flow in
other languages (such as ifte which is like if..then..else..) and
strange and wonderful effects (such as cleave which is a simple
concurrency combinator.)

**Mention that sequences intended as programs are called "quoted
programs".

§ Literals and Simple Functions

    joy? 1 2 3
    -> 3 2 1

    joy? +
    -> 5 1

    joy? +
    -> 6

    joy? 7
    -> 7 6

    joy? *
    -> 42

    joy?


§ Simple Combinators

    joy? 23 [0 >] [dup --] while

    -> 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23


§ Definitions and More Elaborate Functions
  Refactoring

§ Programming and Metaprogramming

§ Further Reading


--------------------------------------------------


Part II - This Implementation


