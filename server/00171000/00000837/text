# -*- coding: utf-8 -*-
from __future__ import print_function
from eumi.joy.joy import joy
from eumi.joy.initializer import FUNCTIONS
from eumi.joy.parser import text_to_expression
from eumi.joy.stack import strstack, iter_stack, list_to_stack


def dip(stack, continuation, dictionary):
  (quote, (x, stack)) = stack

  continuation = x, continuation
  while quote:
    term, quote = quote
    continuation = term, continuation

  return stack, continuation, dictionary


def J(stack, continuation, dictionary):
  while continuation:
    _print_trace(stack, continuation)
    term, continuation = continuation
    if callable(term):
      stack, continuation, dictionary = term(stack, continuation, dictionary)
    else:
      stack = term, stack
  return stack, continuation, dictionary


def _print_trace(stack, expression):
  stack = list(iter_stack(stack))
  stack.reverse()
  print(strstack(list_to_stack(stack)), '.', strstack(expression))


S = text_to_expression('23')
E = 9, (18, (S, (dip, (44, ()))))
s = ()
print(J(s, E, ())[0])


































##def runit(C):
###  C = [(E, s)]
##
##  while True:
##
##    E, s = C.pop()
##    if not E:
##      return s
##
##    term, E = E
##    if not callable(term):
##      s = term, s
##      C.append((E, s))
##      continue
##
##    C.append((E, s))
##    C = term(C)
##  return C



##    def f(res):
##      return J(E, res)
##    expr, stack, continuation = term(s, f)
##    return continuation(J(expr, stack))

##def P(stack):
##  print 'P', stack
##  return stack


##def dip(S, cont):
##  '''
##  dip expects a program [P] and below that another item X. It pops both,
##  saves X, executes P and then restores X.
##  '''
##  (quote, (x, stack)) = S
##  return quote, stack, lambda s: cont((x, s))

##def dip(C):
##  E, s = C.pop()
##  (quote, (x, stack)) = s
##
##  def f(C):
##    E, s = C.pop()
##    s = x, s
##    C.append((E, s))
##    return C
##
##  C.append((quote, stack))
##
##  C.append(((f, E), stack))
##  return C


